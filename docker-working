Output from docker history for working image

~~~
pi@raspberrypi:~/projects/berry_forest $ docker history --no-trunc berry:v1  | tac | tr -s ' ' | cut -d " " -f 5- | sed 's,^/bin/sh -c #(nop) ,,g' | sed 's,^/bin/sh -c,RUN,g' | sed 's, && ,\n  & ,g' | sed 's,\s*[0-9]*[\.]*[0-9]*\s*[kMG]*B\s*$,,g' | head -n -1 
ADD file:89db8453485648b09e63411b6e2ad84f08844ee55cb115e59cdc8c8cb1c29a1f in /
~~~

https://github.com/docker-library/python/blob/master/3.7/stretch/Dockerfile



 docker history --no-trunc berry:v1  | tac | tr -s ' ' | cut -d " " -f 5- | sed 's,^/bin/sh -c #(nop) ,,g' | sed 's,^/bin/sh -c,RUN,g' | sed 's, && ,\n  & ,g' | sed 's,\s*[0-9]*[\.]*[0-9]*\s*[kMG]*B\s*$,,g' | head -n -1 
ADD file:89db8453485648b09e63411b6e2ad84f08844ee55cb115e59cdc8c8cb1c29a1f in /
CMD ["bash"]
RUN apt-get update
   &&  apt-get install -y --no-install-recommends ca-certificates curl netbase wget
   &&  rm -rf /var/lib/apt/lists/*
RUN set -ex; if ! command -v gpg > /dev/null; then apt-get update; apt-get install -y --no-install-recommends gnupg dirmngr ; rm -rf /var/lib/apt/lists/*; fi
RUN apt-get update
   &&  apt-get install -y --no-install-recommends bzr git mercurial openssh-client subversion procps
   &&  rm -rf /var/lib/apt/lists/*
RUN set -ex; apt-get update; DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends autoconf automake bzip2 dpkg-dev file g++ gcc imagemagick libbz2-dev libc6-dev libcurl4-openssl-dev libdb-dev libevent-dev libffi-dev libgdbm-dev libglib2.0-dev libgmp-dev libjpeg-dev libkrb5-dev liblzma-dev libmagickcore-dev libmagickwand-dev libmaxminddb-dev libncurses5-dev libncursesw5-dev libpng-dev libpq-dev libreadline-dev libsqlite3-dev libssl-dev libtool libwebp-dev libxml2-dev libxslt-dev libyaml-dev make patch unzip xz-utils zlib1g-dev $( if apt-cache show 'default-libmysqlclient-dev' 2>/dev/null | grep -q '^Version:'; then echo 'default-libmysqlclient-dev'; else echo 'libmysqlclient-dev'; fi ) ; rm -rf /var/lib/apt/lists/*
ENV PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
ENV LANG=C.UTF-8
RUN apt-get update
   &&  apt-get install -y --no-install-recommends libbluetooth-dev tk-dev uuid-dev
   &&  rm -rf /var/lib/apt/lists/*
ENV GPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
ENV PYTHON_VERSION=3.7.7
RUN set -ex
   &&  wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"
   &&  wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"
   &&  export GNUPGHOME="$(mktemp -d)"
   &&  gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY"
   &&  gpg --batch --verify python.tar.xz.asc python.tar.xz
   &&  { command -v gpgconf > /dev/null
   &&  gpgconf --kill all || :; }
   &&  rm -rf "$GNUPGHOME" python.tar.xz.asc
   &&  mkdir -p /usr/src/python
   &&  tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz
   &&  rm python.tar.xz
   &&  cd /usr/src/python
   &&  gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"
   &&  ./configure --build="$gnuArch" --enable-loadable-sqlite-extensions --enable-optimizations --enable-option-checking=fatal --enable-shared --with-system-expat --with-system-ffi --without-ensurepip
   &&  make -j "$(nproc)" PROFILE_TASK='-m test.regrtest --pgo test_array test_base64 test_binascii test_binhex test_binop test_bytes test_c_locale_coercion test_class test_cmath test_codecs test_compile test_complex test_csv test_decimal test_dict test_float test_fstring test_hashlib test_io test_iter test_json test_long test_math test_memoryview test_pickle test_re test_set test_slice test_struct test_threading test_time test_traceback test_unicode '
   &&  make install
   &&  ldconfig
   &&  find /usr/local -depth \( \( -type d -a \( -name test -o -name tests -o -name idle_test \) \) -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \) -exec rm -rf '{}' +
   &&  rm -rf /usr/src/python
   &&  python3 --version
RUN cd /usr/local/bin
   &&  ln -s idle3 idle
   &&  ln -s pydoc3 pydoc
   &&  ln -s python3 python
   &&  ln -s python3-config python-config
ENV PYTHON_PIP_VERSION=20.1.1
ENV PYTHON_GET_PIP_URL=https://github.com/pypa/get-pip/raw/eff16c878c7fd6b688b9b4c4267695cf1a0bf01b/get-pip.py
ENV PYTHON_GET_PIP_SHA256=b3153ec0cf7b7bbf9556932aa37e4981c35dc2a2c501d70d91d2795aa532be79
RUN set -ex; wget -O get-pip.py "$PYTHON_GET_PIP_URL"; echo "$PYTHON_GET_PIP_SHA256 *get-pip.py" | sha256sum --check --strict -; python get-pip.py --disable-pip-version-check --no-cache-dir "pip==$PYTHON_PIP_VERSION" ; pip --version; find /usr/local -depth \( \( -type d -a \( -name test -o -name tests -o -name idle_test \) \) -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \) -exec rm -rf '{}' +; rm -f get-pip.py
CMD ["python3"]
COPY dir:b2f5850bb2f7386f5a000d1d299ada991061fb981b377d45625015054d2622f4 in ./
RUN pip install -r requirements.txt
COPY dir:b2f5850bb2f7386f5a000d1d299ada991061fb981b377d45625015054d2622f4 in .
EXPOSE 8080
CMD ["python" "./app.py"]
pi@raspberrypi:~/projects/berry_forest $ vi exspose.sh
pi@raspberrypi:~/projects/berry_forest $ chmod +x exspose.sh berry:v1
chmod: cannot access 'berry:v1': No such file or directory
pi@raspberrypi:~/projects/berry_forest $ chmod +x exspose.sh berry
chmod: cannot access 'berry': No such file or directory
pi@raspberrypi:~/projects/berry_forest $ chmod +x exspose.sh 
pi@raspberrypi:~/projects/berry_forest $ ./exspose.sh berry:v1

ENV PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

ENV LANG=C.UTF-8

ENV GPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D

ENV PYTHON_VERSION=3.7.7

ENV PYTHON_PIP_VERSION=20.1.1

ENV PYTHON_GET_PIP_URL=https://github.com/pypa/get-pip/raw/eff16c878c7fd6b688b9b4c4267695cf1a0bf01b/get-pip.py

ENV PYTHON_GET_PIP_SHA256=b3153ec0cf7b7bbf9556932aa37e4981c35dc2a2c501d70d91d2795aa532be79

EXPOSE 8080/tcp



CMD ["python","./app.py"]
